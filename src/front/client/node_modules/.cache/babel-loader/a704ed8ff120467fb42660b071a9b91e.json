{"ast":null,"code":"var _jsxFileName = \"E:\\\\proj\\\\Landing_sis\\\\src\\\\front\\\\client\\\\src\\\\pages\\\\productList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { DataGrid } from '@material-ui/data-grid'; // import ReactTable from 'react-table'\n// import { Button, ButtonGroup, Container, Table } from 'reactstrap'\n\nimport api from '../api';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Update = styled.div`\n    color: #ef9b0f;\n    cursor: pointer;\n`;\n_c = Update;\nconst Delete = styled.div`\n    color: #ff0000;\n    cursor: pointer;\n`;\n_c2 = Delete;\n\nconst LoadProduct = async () => {\n  let val;\n  await api.getAllProducts().then(products => {\n    val = products;\n  });\n  console.log(val);\n  return val;\n};\n\n_c3 = LoadProduct;\n\nconst UpdateProduct = () => {\n  const updateUser = event => {\n    event.preventDefault(); // window.location.href = `/products/update/${this.props.id}`\n  };\n\n  return /*#__PURE__*/_jsxDEV(Update, {\n    onClick: updateUser,\n    children: \"Update\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 12\n  }, this);\n};\n\n_c4 = UpdateProduct;\n\nconst DeleteProduct = () => {\n  const deleteUser = event => {\n    event.preventDefault(); // console.log(this.props.selection.selectionModel);\n    // if (window.confirm(`Do you want to delete the product ${this.props.id} permanently`)) {\n    // this.props.selection.selectionModel.map(element => (api.deleteProductById(element)));\n    // window.location.reload();\n    // }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Delete, {\n    onClick: deleteUser,\n    children: \"Delete\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 12\n  }, this);\n}; // const [select, setSelection] = useState([]);\n// const [products, setProducts] = useState([]);\n// let load = async (setProducts) => {\n\n\n_c5 = DeleteProduct;\nlet rows = [];\nconst columns = [{\n  field: 'type',\n  headerName: 'type',\n  width: 150\n}, {\n  field: 'name',\n  headerName: 'name',\n  width: 150\n}, {\n  field: 'picture',\n  headerName: 'picture',\n  width: 150\n}, {\n  field: 'price',\n  headerName: 'price',\n  width: 150\n}]; // let load = async () => {\n//     await api.getAllProducts().then(products => {\n//         // setProducts(product.data)\n//         // console.log(products);\n//         this.setState({ products: products.data })\n//     })\n//     // const { products } = this.state;\n//     try {\n//         console.log('TCL: ProductList -> render -> products', products);\n//         for (let i = 0; i < products.length; i++) {\n//             rows.push({ id: products[i]._id, type: products[i].type, name: products[i].name, picture: products[i].picture, price: products[i].price });\n//         }\n//     }\n//     catch (error) {\n//         console.log(error);\n//     }\n// }\n// load();\n// this.columns = columns;\n// this.rows = rows;\n// }\n// const loaded = async () => {\n//     let val;\n//     await api.getAllProducts().then(products => {\n//         val = products;\n//     });\n//     console.log(val);\n//     return val;\n// }\n\nexport function ProductList() {\n  _s();\n\n  const [select, setSelection] = useState([]);\n  const [products, setProducts] = useState([]); // const loaded = async () => {\n  //     await api.getAllProducts().then(products => {\n  // loaded();\n  // setProducts(loaded().data);\n  // setProducts(LoadProduct);\n\n  setTimeout(() => {\n    // setProducts(loaded().data)\n    // console.log(products);\n    // this.setState({ products: products.data })\n    // })\n    // try {\n    console.log('TCL: ProductList -> render -> products', products); // for (let i = 0; i < products.length; i++) {\n\n    products.map(product => rows.push({\n      id: product._id,\n      type: product.type,\n      name: product.name,\n      picture: product.picture,\n      price: product.price\n    }));\n  }, 2000); // rows.push({ id: products[i]._id, type: products[i].type, name: products[i].name, picture: products[i].picture, price: products[i].price });\n  // }\n  // }\n  // catch (error) {\n  // console.log(error);\n  // }\n  // }\n  // loaded();\n  // const { products } = this.state;\n  // try {\n  //     console.log('TCL: ProductList -> render -> products', products);\n  //     for (let i = 0; i < products.length; i++) {\n  //         rows.push({ id: products[i]._id, type: products[i].type, name: products[i].name, picture: products[i].picture, price: products[i].price });\n  //     }\n  // }\n  // catch (error) {\n  //     console.log(error);\n  // }\n  // load(setProducts);\n  // constructor(props) {\n  // super(props);\n  // this.state = { products: [], selection: [] };\n  // this.load = this.load.bind(this);\n  // this.columns = [];\n  // this.rows = [];\n  // this.selection = [];\n  // this.returnSelection = this.returnSelection.bind(this);\n  // }\n  // componentDidMount = async () => {\n  //     await api.getAllProducts().then(products => {\n  //         this.setState({\n  //             products: products.data,\n  //         })\n  //         this.load();\n  //     })\n  // }\n  // componentDidUpdate = async (prevProps, prevState) => {\n  //     // await api.getAllProducts().then(products => {\n  //     //     this.setState({\n  //     //         products: products.data,\n  //     //     })\n  //     //     // this.load();\n  //     // })\n  //     console.log(prevState);\n  //     if (this.state.products !== prevState.products) {\n  //         // this.load();\n  //         await api.getAllProducts().then(products => {\n  //             this.setState({\n  //                 products: products.data,\n  //             })\n  //             this.load();\n  //         })\n  //     }\n  // }\n  // let load = async () => {\n  //     await api.getAllProducts().then(product => {\n  //         setProducts(product.data)\n  //     })\n  //     const { products } = this.state;\n  //     try {\n  //         console.log('TCL: ProductList -> render -> products', products);\n  //         for (let i = 0; i < products.length; i++) {\n  //             this.rows.push({ id: products[i]._id, type: products[i].type, name: products[i].name, picture: products[i].picture, price: products[i].price });\n  //         }\n  //     }\n  //     catch (error) {\n  //         console.log(error);\n  //     }\n  //     let rows = [\n  //     ]\n  //     const columns = [\n  //         { field: 'type', headerName: 'type', width: 150 },\n  //         { field: 'name', headerName: 'name', width: 150 },\n  //         { field: 'picture', headerName: 'picture', width: 150 },\n  //         { field: 'price', headerName: 'price', width: 150 },\n  //     ];\n  //     this.columns = columns;\n  //     this.rows = rows;\n  // }\n  // async returnSelection(newSelection) {\n  //     this.setState({ selection: newSelection });\n  // }\n  // loaded();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 700,\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      id: rows._id,\n      rows: rows,\n      columns: columns,\n      pageSize: 10,\n      checkboxSelection: true,\n      onSelectionModelChange: newSelection => {\n        setSelection(newSelection.rows);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 9\n  }, this);\n} // export default withRouter(ProductList);\n\n_s(ProductList, \"2czyJ/wSTJ8nYEAmZCddjZ/78z4=\");\n\n_c6 = ProductList;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Update\");\n$RefreshReg$(_c2, \"Delete\");\n$RefreshReg$(_c3, \"LoadProduct\");\n$RefreshReg$(_c4, \"UpdateProduct\");\n$RefreshReg$(_c5, \"DeleteProduct\");\n$RefreshReg$(_c6, \"ProductList\");","map":{"version":3,"sources":["E:/proj/Landing_sis/src/front/client/src/pages/productList.js"],"names":["React","useState","DataGrid","api","styled","Update","div","Delete","LoadProduct","val","getAllProducts","then","products","console","log","UpdateProduct","updateUser","event","preventDefault","DeleteProduct","deleteUser","rows","columns","field","headerName","width","ProductList","select","setSelection","setProducts","setTimeout","map","product","push","id","_id","type","name","picture","price","height","newSelection"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\n// import ReactTable from 'react-table'\r\n// import { Button, ButtonGroup, Container, Table } from 'reactstrap'\r\nimport api from '../api'\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst Update = styled.div`\r\n    color: #ef9b0f;\r\n    cursor: pointer;\r\n`\r\n\r\nconst Delete = styled.div`\r\n    color: #ff0000;\r\n    cursor: pointer;\r\n`\r\n\r\n\r\nconst LoadProduct = async () => {\r\n    let val;\r\n    await api.getAllProducts().then(products => {\r\n        val = products;\r\n    });\r\n    console.log(val);\r\n    return val;\r\n}\r\n\r\nconst UpdateProduct = () => {\r\n    const updateUser = event => {\r\n        event.preventDefault()\r\n\r\n        // window.location.href = `/products/update/${this.props.id}`\r\n    }\r\n    return <Update onClick={updateUser}>Update</Update>\r\n}\r\n\r\nconst DeleteProduct = () => {\r\n    const deleteUser = event => {\r\n        event.preventDefault();\r\n        // console.log(this.props.selection.selectionModel);\r\n        // if (window.confirm(`Do you want to delete the product ${this.props.id} permanently`)) {\r\n        // this.props.selection.selectionModel.map(element => (api.deleteProductById(element)));\r\n        // window.location.reload();\r\n        // }\r\n    }\r\n    return <Delete onClick={deleteUser}>Delete</Delete>\r\n}\r\n\r\n// const [select, setSelection] = useState([]);\r\n// const [products, setProducts] = useState([]);\r\n\r\n// let load = async (setProducts) => {\r\nlet rows = [\r\n]\r\nconst columns = [\r\n    { field: 'type', headerName: 'type', width: 150 },\r\n    { field: 'name', headerName: 'name', width: 150 },\r\n    { field: 'picture', headerName: 'picture', width: 150 },\r\n    { field: 'price', headerName: 'price', width: 150 },\r\n];\r\n// let load = async () => {\r\n//     await api.getAllProducts().then(products => {\r\n//         // setProducts(product.data)\r\n//         // console.log(products);\r\n//         this.setState({ products: products.data })\r\n//     })\r\n\r\n//     // const { products } = this.state;\r\n//     try {\r\n//         console.log('TCL: ProductList -> render -> products', products);\r\n//         for (let i = 0; i < products.length; i++) {\r\n//             rows.push({ id: products[i]._id, type: products[i].type, name: products[i].name, picture: products[i].picture, price: products[i].price });\r\n//         }\r\n//     }\r\n//     catch (error) {\r\n//         console.log(error);\r\n//     }\r\n// }\r\n// load();\r\n\r\n// this.columns = columns;\r\n// this.rows = rows;\r\n// }\r\n\r\n// const loaded = async () => {\r\n//     let val;\r\n//     await api.getAllProducts().then(products => {\r\n//         val = products;\r\n//     });\r\n//     console.log(val);\r\n//     return val;\r\n// }\r\n\r\nexport function ProductList() {\r\n    const [select, setSelection] = useState([]);\r\n    const [products, setProducts] = useState([]);\r\n    // const loaded = async () => {\r\n    //     await api.getAllProducts().then(products => {\r\n        // loaded();\r\n        // setProducts(loaded().data);\r\n        // setProducts(LoadProduct);\r\n        setTimeout(() => {\r\n            // setProducts(loaded().data)\r\n            // console.log(products);\r\n            // this.setState({ products: products.data })\r\n        // })\r\n        // try {\r\n        console.log('TCL: ProductList -> render -> products', products);\r\n        // for (let i = 0; i < products.length; i++) {\r\n        products.map(product => (rows.push({ id: product._id, type: product.type, name: product.name, picture: product.picture, price: product.price})))\r\n        }, 2000)\r\n                // rows.push({ id: products[i]._id, type: products[i].type, name: products[i].name, picture: products[i].picture, price: products[i].price });\r\n            // }\r\n        // }\r\n        // catch (error) {\r\n            // console.log(error);\r\n        // }\r\n    // }\r\n    // loaded();\r\n    // const { products } = this.state;\r\n    // try {\r\n    //     console.log('TCL: ProductList -> render -> products', products);\r\n    //     for (let i = 0; i < products.length; i++) {\r\n    //         rows.push({ id: products[i]._id, type: products[i].type, name: products[i].name, picture: products[i].picture, price: products[i].price });\r\n    //     }\r\n    // }\r\n    // catch (error) {\r\n    //     console.log(error);\r\n    // }\r\n    // load(setProducts);\r\n    // constructor(props) {\r\n    // super(props);\r\n    // this.state = { products: [], selection: [] };\r\n    // this.load = this.load.bind(this);\r\n    // this.columns = [];\r\n    // this.rows = [];\r\n    // this.selection = [];\r\n    // this.returnSelection = this.returnSelection.bind(this);\r\n\r\n    // }\r\n\r\n    // componentDidMount = async () => {\r\n    //     await api.getAllProducts().then(products => {\r\n    //         this.setState({\r\n    //             products: products.data,\r\n\r\n    //         })\r\n    //         this.load();\r\n    //     })\r\n    // }\r\n\r\n\r\n\r\n    // componentDidUpdate = async (prevProps, prevState) => {\r\n    //     // await api.getAllProducts().then(products => {\r\n    //     //     this.setState({\r\n    //     //         products: products.data,\r\n    //     //     })\r\n    //     //     // this.load();\r\n    //     // })\r\n    //     console.log(prevState);\r\n    //     if (this.state.products !== prevState.products) {\r\n    //         // this.load();\r\n    //         await api.getAllProducts().then(products => {\r\n    //             this.setState({\r\n    //                 products: products.data,\r\n    //             })\r\n    //             this.load();\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    // let load = async () => {\r\n    //     await api.getAllProducts().then(product => {\r\n    //         setProducts(product.data)\r\n    //     })\r\n\r\n    //     const { products } = this.state;\r\n    //     try {\r\n    //         console.log('TCL: ProductList -> render -> products', products);\r\n    //         for (let i = 0; i < products.length; i++) {\r\n    //             this.rows.push({ id: products[i]._id, type: products[i].type, name: products[i].name, picture: products[i].picture, price: products[i].price });\r\n    //         }\r\n    //     }\r\n    //     catch (error) {\r\n    //         console.log(error);\r\n    //     }\r\n    //     let rows = [\r\n    //     ]\r\n    //     const columns = [\r\n    //         { field: 'type', headerName: 'type', width: 150 },\r\n    //         { field: 'name', headerName: 'name', width: 150 },\r\n    //         { field: 'picture', headerName: 'picture', width: 150 },\r\n    //         { field: 'price', headerName: 'price', width: 150 },\r\n    //     ];\r\n    //     this.columns = columns;\r\n    //     this.rows = rows;\r\n    // }\r\n\r\n    // async returnSelection(newSelection) {\r\n    //     this.setState({ selection: newSelection });\r\n    // }\r\n    // loaded();\r\n    return (\r\n        <div style={{ height: 700, width: '100%' }}>\r\n            {/* {loaded()} */}\r\n            <DataGrid id={rows._id} rows={rows} columns={columns} pageSize={10} checkboxSelection\r\n                onSelectionModelChange={(newSelection) => {\r\n                    setSelection(newSelection.rows);\r\n                }} />\r\n            {/* <UpdateProduct /> */}\r\n            {/* <DeleteProduct /> */}\r\n        </div >\r\n    );\r\n}\r\n\r\n// export default withRouter(ProductList);"]},"metadata":{},"sourceType":"module"}