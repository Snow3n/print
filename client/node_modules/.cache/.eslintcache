[{"F:\\Code\\personal\\print\\client\\src\\index.js":"1","F:\\Code\\personal\\print\\client\\src\\App.js":"2","F:\\Code\\personal\\print\\client\\src\\reportWebVitals.js":"3","F:\\Code\\personal\\print\\client\\src\\routes.js":"4","F:\\Code\\personal\\print\\client\\src\\components\\Navbar.js":"5","F:\\Code\\personal\\print\\client\\src\\components\\Footer.js":"6","F:\\Code\\personal\\print\\client\\src\\components\\dialog.form.js":"7","F:\\Code\\personal\\print\\client\\src\\pages\\main.js":"8","F:\\Code\\personal\\print\\client\\src\\pages\\productList.js":"9","F:\\Code\\personal\\print\\client\\src\\pages\\productAdd.js":"10","F:\\Code\\personal\\print\\client\\src\\pages\\t-shirts.js":"11","F:\\Code\\personal\\print\\client\\src\\pages\\cups.js":"12","F:\\Code\\personal\\print\\client\\src\\pages\\order.js":"13","F:\\Code\\personal\\print\\client\\src\\pages\\orderList.js":"14","F:\\Code\\personal\\print\\client\\src\\api.js":"15","F:\\Code\\personal\\print\\client\\src\\pages\\About.jsx":"16","F:\\Code\\personal\\print\\client\\src\\pages\\PaymentAndDeliver.jsx":"17"},{"size":524,"mtime":1633970041736,"results":"18","hashOfConfig":"19"},{"size":503,"mtime":1633970041732,"results":"20","hashOfConfig":"19"},{"size":375,"mtime":1633970041741,"results":"21","hashOfConfig":"19"},{"size":1078,"mtime":1634156613314,"results":"22","hashOfConfig":"19"},{"size":1847,"mtime":1633970041736,"results":"23","hashOfConfig":"19"},{"size":1042,"mtime":1633970041735,"results":"24","hashOfConfig":"19"},{"size":5533,"mtime":1634152869945,"results":"25","hashOfConfig":"19"},{"size":4617,"mtime":1633970041737,"results":"26","hashOfConfig":"19"},{"size":4072,"mtime":1633970041740,"results":"27","hashOfConfig":"19"},{"size":1450,"mtime":1633970041739,"results":"28","hashOfConfig":"19"},{"size":1500,"mtime":1633970041741,"results":"29","hashOfConfig":"19"},{"size":2525,"mtime":1633970041737,"results":"30","hashOfConfig":"19"},{"size":10056,"mtime":1633970041738,"results":"31","hashOfConfig":"19"},{"size":4987,"mtime":1633970041739,"results":"32","hashOfConfig":"19"},{"size":1061,"mtime":1633970041735,"results":"33","hashOfConfig":"19"},{"size":3919,"mtime":1634156519199,"results":"34","hashOfConfig":"19"},{"size":2127,"mtime":1634156512073,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"h3csun",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\Code\\personal\\print\\client\\src\\index.js",[],["74","75"],"F:\\Code\\personal\\print\\client\\src\\App.js",[],"F:\\Code\\personal\\print\\client\\src\\reportWebVitals.js",[],"F:\\Code\\personal\\print\\client\\src\\routes.js",[],"F:\\Code\\personal\\print\\client\\src\\components\\Navbar.js",[],"F:\\Code\\personal\\print\\client\\src\\components\\Footer.js",[],"F:\\Code\\personal\\print\\client\\src\\components\\dialog.form.js",["76","77"],"F:\\Code\\personal\\print\\client\\src\\pages\\main.js",[],"F:\\Code\\personal\\print\\client\\src\\pages\\productList.js",["78"],"import React, { useState, useEffect } from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport { Button, ButtonGroup, Container, TextField } from '@material-ui/core';\r\nimport api from '../api'\r\n\r\nlet rows = [\r\n]\r\nconst columns = [\r\n    { field: 'type', headerName: 'type', width: 150 },\r\n    { field: 'name', headerName: 'name', width: 150 },\r\n    { field: 'picture', headerName: 'picture', width: 150 },\r\n    { field: 'price', headerName: 'price', width: 150 },\r\n];\r\n\r\nexport function ProductList(props) {\r\n    const [selection, setSelection] = useState([]);\r\n    const [products, setProducts] = useState([0]);\r\n    const [edit, setEdit] = useState([]);\r\n\r\n    const changeProduct = async () => {\r\n        await api.getProductById(selection).then(prod => {\r\n            setEdit(prod.data);\r\n        })\r\n\r\n    }\r\n    // TODO: update products\r\n    const EditProduct = async () => {\r\n        await api.updateProductById(edit._id, edit);\r\n        load();\r\n    }\r\n\r\n    const handleInputChange = async (event) => {\r\n        const { name, value } = event.target;\r\n        setEdit({\r\n            ...edit,\r\n            [name]: value,\r\n        })\r\n    };\r\n\r\n    const DeleteProduct = async () => {\r\n        if (window.confirm(`Do you want to delete the product ${selection} permanently`)) {\r\n            await api.deleteProductById(selection);\r\n            load();\r\n        }\r\n    }\r\n\r\n    const AddProduct = () => {\r\n        window.location.href = `/product/new`;\r\n    }\r\n\r\n    async function load() {\r\n        rows = [];\r\n        await api.getAllProducts().then(products => {\r\n            products.data.map(product => (rows.push({ id: product._id, type: product.type, name: product.name, picture: product.picture, price: product.price })));\r\n            setProducts(products.data);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function load() {\r\n            rows = [];\r\n            await api.getAllProducts().then(products => {\r\n                products.data.map(product => (rows.push({ id: product._id, type: product.type, name: product.name, picture: product.picture, price: product.price })));\r\n                setProducts(products.data);\r\n            });\r\n        }\r\n        load();\r\n    }, []);\r\n    return (\r\n        <div style={{ height: 700, width: '100%', display: 'flex', backgroundColor: 'white' }}>\r\n            <DataGrid id={rows._id} rows={rows} columns={columns} pageSize={10} checkboxSelection\r\n                onSelectionModelChange={(newSelection) => {\r\n                    setSelection(newSelection.selectionModel);\r\n                }} selectionModel={selection} />\r\n            <div style={{ width: '30%' }}>\r\n                <ButtonGroup>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={changeProduct}>Edit Data</Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={DeleteProduct}>Delete Data</Button>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={AddProduct}>Add Data</Button>\r\n                </ButtonGroup>\r\n                <Container style={{ width: '200px' }}>\r\n                    <form onSubmit={EditProduct} method=\"PUT\">\r\n                        <TextField onChange={handleInputChange} label=\"_id\" type=\"text\" name=\"_id\" id=\"_id\" value={edit._id || ''} disabled={true} />\r\n                        <TextField onChange={handleInputChange} label=\"type\" type=\"text\" name=\"type\" id=\"type\" value={edit.type || ''} />\r\n                        <TextField onChange={handleInputChange} label=\"name\" type=\"text\" name=\"name\" id=\"name\" value={edit.name || ''} />\r\n                        <TextField onChange={handleInputChange} label=\"picture\" type=\"text\" name=\"picture\" id=\"picture\" value={edit.picture || ''} />\r\n                        <TextField onChange={handleInputChange} label=\"price\" type=\"text\" name=\"price\" id=\"price\" value={edit.price || 0} />\r\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\r\n                    </form>\r\n                </Container>\r\n            </div>\r\n        </div >\r\n    );\r\n}","F:\\Code\\personal\\print\\client\\src\\pages\\productAdd.js",[],"F:\\Code\\personal\\print\\client\\src\\pages\\t-shirts.js",[],"F:\\Code\\personal\\print\\client\\src\\pages\\cups.js",[],"F:\\Code\\personal\\print\\client\\src\\pages\\order.js",["79","80"],"import React, { useState, useEffect } from 'react';\r\nimport '../App.css';\r\nimport api from '../api';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Button, FormControl, InputLabel, Select, Dialog, DialogTitle, DialogContent, Typography } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport $ from 'jquery';\r\n\r\nconst defaultValues = {\r\n    name: \"\",\r\n    surname: \"\",\r\n    email: \"\",\r\n    city: \"\",\r\n    shipping: \"\",\r\n    socType: \"\",\r\n    socValue: \"\",\r\n    paid: false,\r\n    sent: false,\r\n    products: \"\",\r\n    price: \"\",\r\n};\r\n\r\nexport function Order() {\r\n    const [formValues, setFormValues] = useState(defaultValues);\r\n    const [items, setItems] = useState([]);\r\n    const [price, setPrice] = useState(0);\r\n    const [shippingAddress, setShippingAddress] = useState();\r\n    const [update, setUpdate] = useState();\r\n    const [complete, setComplete] = useState(false);\r\n\r\n    let addresses = [\"1\", 2];\r\n\r\n    async function loadMap() {\r\n        $(function () {\r\n            var settings = {\r\n                \"async\": true,\r\n                \"crossDomain\": true,\r\n                \"url\": \"https://api.novaposhta.ua/v2.0/json/\",\r\n                \"method\": \"POST\",\r\n                \"headers\": {\r\n                    \"content-type\": \"application/json\",\r\n\r\n                },\r\n                \"processData\": false,\r\n                \"data\": \"{\\r\\n\\\"257efb66873e2c130a5ae6af8bce89a6\\\": \\\"\\\",\\r\\n \\\"modelName\\\": \\\"AddressGeneral\\\",\\r\\n \\\"calledMethod\\\": \\\"getWarehouses\\\",\\r\\n \\\"methodProperties\\\": {\\r\\n \\\"Language\\\": \\\"ru\\\",\\r\\n \\\"Limit\\\": 5\\r\\n}\\r\\n}\"\r\n                // \"data\": \"{\\r\\n\\\"257efb66873e2c130a5ae6af8bce89a6\\\": \\\"\\\",\\r\\n \\\"modelName\\\": \\\"AddressGeneral\\\",\\r\\n \\\"calledMethod\\\": \\\"getWarehouses\\\",\\r\\n \\\"methodProperties\\\": {\\r\\n \\\"CityName\\\": \\\"васильевка\\\",\\r\\n \\\"Limit\\\": 5\\r\\n }\\r\\n}\"\r\n            }\r\n\r\n            $.ajax(settings).done(function (response) {\r\n                console.log(response.data);\r\n                addresses = response.data;\r\n                setUpdate(Math.random());\r\n            });\r\n        });\r\n    }\r\n\r\n    async function loadCart() {\r\n        if (localStorage.getItem('podarok-print-en')) {\r\n            let cartList = [];\r\n            let stored = JSON.parse(localStorage.getItem('podarok-print-en'));\r\n            let pr = 0;\r\n            for (let i = 0; i < stored.cart.cartItems.length; i++) {\r\n                cartList.push(stored.cart.cartItems[i]);\r\n            }\r\n            for (let t = 0; t < cartList.length; t++) {\r\n                pr += cartList[t].price * cartList[t].quantity;\r\n            }\r\n            setPrice(pr);\r\n            setItems(cartList);\r\n            console.log(items)\r\n            for (let j = 0; j < items.length; j++) {\r\n                setFormValues({ ...formValues, products: items[j]._id })\r\n            }\r\n        }\r\n        console.log(formValues)\r\n        await loadMap();\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setComplete(false);\r\n        window.location.href = '/';\r\n    }\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormValues({\r\n            ...formValues,\r\n            [name]: value,\r\n            price: price,\r\n            products: items,\r\n        });\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        console.log(formValues);\r\n        await api.insertOrder(formValues).then(\r\n            localStorage.removeItem('podarok-print-en')\r\n        ).then(\r\n            setComplete(true)\r\n        );\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setShippingAddress(event.target.value);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        loadCart();\r\n    }, []);\r\n\r\n    return (\r\n        <div style={{ backgroundColor: 'whitesmoke' }}>\r\n            <form onSubmit={handleSubmit} method=\"POST\" style={{ width: '500px', margin: 'auto' }}>\r\n                {items.map((item, i) => (\r\n                    <Grid key={i} item className='contentBlock' style={{ margin: 'auto', width: '500px', backgroundColor: 'whitesmoke' }}>\r\n                        <Paper className=\"paper\" style={{ display: \"flex\", backgroundColor: 'whitesmoke' }}>\r\n                            <li><img src={'/imgs/' + item.picture + '.jpg'} alt={item.name + ' picture'} className=\"picture\" style={{ width: '100px', height: '100px', margin: 'auto' }} /></li>\r\n                            <li className=\"productName\" style={{ margin: 'auto' }}>{item.name}</li>\r\n                            <li style={{ margin: 'auto' }}>{item.quantity}</li>\r\n                            <li className=\"productPrice\" style={{ margin: 'auto' }}>{'₴' + item.price * item.quantity}</li>\r\n                        </Paper>\r\n                    </Grid>\r\n                ))}\r\n                <h3 style={{ float: 'right' }}>Сумма: {price} грн</h3>\r\n                <Grid container alignItems=\"center\" justify=\"center\" direction=\"column\" style={{ backgroundColor: 'whitesmoke' }}>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"name-input\"\r\n                            name=\"name\"\r\n                            label=\"Имя\"\r\n                            type=\"text\"\r\n                            value={formValues.name}\r\n                            onChange={handleInputChange}\r\n                            required={true}\r\n                            fullWidth={true}\r\n                            style={{ width: '300px' }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"surname-input\"\r\n                            name=\"surname\"\r\n                            label=\"Фамилия\"\r\n                            type=\"text\"\r\n                            value={formValues.surname}\r\n                            onChange={handleInputChange}\r\n                            required={true}\r\n                            style={{ width: '300px' }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"city-input\"\r\n                            name=\"city\"\r\n                            label=\"Город\"\r\n                            type=\"text\"\r\n                            value={formValues.city}\r\n                            onChange={handleInputChange}\r\n                            required={true}\r\n                            style={{ width: '300px' }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>{formValues.city ?\r\n                        <FormControl style={{ width: '300px' }}>\r\n                            <InputLabel htmlFor=\"age-native-simple\">Age</InputLabel>\r\n                            <Select\r\n                                native\r\n                                value={shippingAddress}\r\n                                onChange={handleChange}\r\n                                inputProps={{\r\n                                    name: 'age',\r\n                                    id: 'age-native-simple',\r\n                                }}\r\n                            >\r\n                                <option aria-label=\"None\" value=\"\" />\r\n                                {addresses.map((address, i) => (\r\n                                    <option key={i} value={address}>{address}</option>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                        : null}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"email-input\"\r\n                            name=\"email\"\r\n                            label=\"Email\"\r\n                            type=\"email\"\r\n                            value={formValues.email}\r\n                            onChange={handleInputChange}\r\n                            required={true}\r\n                            style={{ width: '300px' }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"price-input\"\r\n                            name=\"price\"\r\n                            type=\"number\"\r\n                            hidden={true}\r\n                            value={formValues.price}\r\n                            required={true}\r\n                            disabled={true}\r\n                            style={{ width: '300px' }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"products-input\"\r\n                            name=\"products\"\r\n                            type=\"text\"\r\n                            hidden={true}\r\n                            value={formValues.products}\r\n                            required={true}\r\n                            disabled={true}\r\n                            style={{ width: '300px' }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button type=\"submit\" variant=\"contained\" style={{ width: '300px', backgroundColor: 'green', margin: '10px 0' }} color=\"primary\">Оформить</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n            <Dialog open={complete} onClose={handleClose} aria-labelledby=\"form-dialog-title\" scroll='body' fullWidth={true} maxWidth={'sm'}>\r\n                <DialogTitle id=\"form-dialog-title\">Спасибо</DialogTitle>\r\n                <DialogContent>\r\n                    <Typography>Мы получили ваш заказ</Typography>\r\n                </DialogContent>\r\n                <Button onClick={handleClose} variant=\"contained\" style={{ width: '100%', backgroundColor: 'green', margin: '10px 0 0' }} color=\"primary\">Закрыть</Button>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}","F:\\Code\\personal\\print\\client\\src\\pages\\orderList.js",["81"],"import React, { useState, useEffect } from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport { Button, ButtonGroup, Container, TextField } from '@material-ui/core';\r\nimport api from '../api'\r\n\r\nlet rows = [\r\n]\r\nconst columns = [\r\n    { field: 'date', headerName: 'date', width: 150 },\r\n    { field: 'address', headerName: 'address', width: 150 },\r\n    { field: 'price', headerName: 'price', width: 150 },\r\n    { field: 'products', headerName: 'products', width: 150 },\r\n    { field: 'clientName', headerName: 'clientName', width: 150 },\r\n    { field: 'clientSurname', headerName: 'clientSurname', width: 150 },\r\n    { field: 'paid', headerName: 'paid', width: 150 },\r\n    { field: 'sent', headerName: 'sent', width: 150 },\r\n    { field: 'email', headerName: 'email', width: 150 },\r\n    { field: 'city', headerName: 'city', width: 150 },\r\n];\r\n\r\nexport function OrderList(props) {\r\n    const [selection, setSelection] = useState([]);\r\n    const [products, setProducts] = useState([0]);\r\n    const [edit, setEdit] = useState([]);\r\n\r\n    const changeProduct = async () => {\r\n        await api.getOrderById(selection).then(prod => {\r\n            setEdit(prod.data);\r\n        })\r\n\r\n    }\r\n    // TODO: update orders\r\n    const EditProduct = async () => {\r\n        await api.updateOrderById(edit._id, edit);\r\n        load();\r\n    }\r\n\r\n    const handleInputChange = async (event) => {\r\n        const { name, value } = event.target;\r\n        setEdit({\r\n            ...edit,\r\n            [name]: value,\r\n        })\r\n    };\r\n\r\n    const DeleteProduct = async () => {\r\n        if (window.confirm(`Do you want to delete the product ${selection} permanently`)) {\r\n            await api.deleteOrderById(selection);\r\n            load();\r\n        }\r\n    }\r\n\r\n    async function load() {\r\n        rows = [];\r\n        await api.getAllOrders().then(products => {\r\n            products.data.map(product => (rows.push({\r\n                id: product._id,\r\n                date: product.date,\r\n                address: product.address,\r\n                price: product.price,\r\n                products: product.products,\r\n                clientName: product.name,\r\n                clientSurname: product.surname,\r\n                paid: product.paid,\r\n                sent: product.sent,\r\n                email: product.email,\r\n                city: product.city,\r\n            })));\r\n            setProducts(products.data);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function load() {\r\n            rows = [];\r\n            await api.getAllOrders().then(products => {\r\n                products.data.map(product => (rows.push({\r\n                    id: product._id,\r\n                    date: product.date,\r\n                    address: product.address,\r\n                    price: product.price,\r\n                    products: product.products,\r\n                    clientName: product.name,\r\n                    clientSurname: product.surname,\r\n                    paid: product.paid,\r\n                    sent: product.sent,\r\n                    email: product.email,\r\n                    city: product.city,\r\n                })));\r\n                setProducts(products.data);\r\n            });\r\n        }\r\n        load();\r\n    }, []);\r\n    return (\r\n        <div style={{ height: 700, width: '100%', display: 'flex', backgroundColor: 'white' }}>\r\n            <DataGrid id={rows._id} rows={rows} columns={columns} pageSize={10} checkboxSelection\r\n                onSelectionModelChange={(newSelection) => {\r\n                    setSelection(newSelection.selectionModel);\r\n                }} selectionModel={selection} />\r\n            <div style={{ width: '30%' }}>\r\n                <ButtonGroup>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={changeProduct}>Edit Data</Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={DeleteProduct}>Delete Data</Button>\r\n                </ButtonGroup>\r\n                <Container style={{ width: '200px' }}>\r\n                    <form onSubmit={EditProduct} method=\"PUT\">\r\n                        <TextField onChange={handleInputChange} label=\"_id\" type=\"text\" name=\"_id\" id=\"_id\" value={edit._id || ''} disabled={true} />\r\n                        <TextField onChange={handleInputChange} label=\"type\" type=\"text\" name=\"type\" id=\"type\" value={edit.type || ''} />\r\n                        <TextField onChange={handleInputChange} label=\"name\" type=\"text\" name=\"name\" id=\"name\" value={edit.name || ''} />\r\n                        <TextField onChange={handleInputChange} label=\"picture\" type=\"text\" name=\"picture\" id=\"picture\" value={edit.picture || ''} />\r\n                        <TextField onChange={handleInputChange} label=\"price\" type=\"text\" name=\"price\" id=\"price\" value={edit.price || 0} />\r\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\r\n                    </form>\r\n                </Container>\r\n            </div>\r\n        </div >\r\n    );\r\n}","F:\\Code\\personal\\print\\client\\src\\api.js",[],"F:\\Code\\personal\\print\\client\\src\\pages\\About.jsx",[],"F:\\Code\\personal\\print\\client\\src\\pages\\PaymentAndDeliver.jsx",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":15,"column":10,"nodeType":"88","messageId":"89","endLine":15,"endColumn":16},{"ruleId":"90","severity":1,"message":"91","line":21,"column":6,"nodeType":"92","endLine":21,"endColumn":8,"suggestions":"93"},{"ruleId":"86","severity":1,"message":"94","line":17,"column":12,"nodeType":"88","messageId":"89","endLine":17,"endColumn":20},{"ruleId":"86","severity":1,"message":"87","line":29,"column":12,"nodeType":"88","messageId":"89","endLine":29,"endColumn":18},{"ruleId":"90","severity":1,"message":"91","line":112,"column":8,"nodeType":"92","endLine":112,"endColumn":10,"suggestions":"95"},{"ruleId":"86","severity":1,"message":"94","line":23,"column":12,"nodeType":"88","messageId":"89","endLine":23,"endColumn":20},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'update' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadCart'. Either include it or remove the dependency array.","ArrayExpression",["98"],"'products' is assigned a value but never used.",["99"],"no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},{"desc":"100","fix":"102"},"Update the dependencies array to be: [loadCart]",{"range":"103","text":"104"},{"range":"105","text":"104"},[832,834],"[loadCart]",[3746,3748]]