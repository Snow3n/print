[{"/home/ilya/12/print/client/src/index.js":"1","/home/ilya/12/print/client/src/App.js":"2","/home/ilya/12/print/client/src/store/index.js":"3","/home/ilya/12/print/client/src/routes.js":"4","/home/ilya/12/print/client/src/components/Navbar.js":"5","/home/ilya/12/print/client/src/components/Footer.js":"6","/home/ilya/12/print/client/src/store/cartReducer.js":"7","/home/ilya/12/print/client/src/components/dialog.form.js":"8","/home/ilya/12/print/client/src/pages/main.js":"9","/home/ilya/12/print/client/src/pages/productList.js":"10","/home/ilya/12/print/client/src/pages/productAdd.js":"11","/home/ilya/12/print/client/src/pages/cups.js":"12","/home/ilya/12/print/client/src/pages/t-shirts.js":"13","/home/ilya/12/print/client/src/pages/order.js":"14","/home/ilya/12/print/client/src/pages/orderList.js":"15","/home/ilya/12/print/client/src/pages/About.jsx":"16","/home/ilya/12/print/client/src/pages/PaymentAndDeliver.jsx":"17","/home/ilya/12/print/client/src/api.js":"18"},{"size":296,"mtime":1634500382809,"results":"19","hashOfConfig":"20"},{"size":481,"mtime":1634500382809,"results":"21","hashOfConfig":"20"},{"size":211,"mtime":1634500382821,"results":"22","hashOfConfig":"20"},{"size":1051,"mtime":1634500382817,"results":"23","hashOfConfig":"20"},{"size":2608,"mtime":1634500382809,"results":"24","hashOfConfig":"20"},{"size":899,"mtime":1634500382809,"results":"25","hashOfConfig":"20"},{"size":577,"mtime":1634500382817,"results":"26","hashOfConfig":"20"},{"size":6425,"mtime":1634500382809,"results":"27","hashOfConfig":"20"},{"size":4528,"mtime":1634500382817,"results":"28","hashOfConfig":"20"},{"size":3979,"mtime":1634500382817,"results":"29","hashOfConfig":"20"},{"size":1403,"mtime":1634500382817,"results":"30","hashOfConfig":"20"},{"size":2805,"mtime":1634500382817,"results":"31","hashOfConfig":"20"},{"size":2886,"mtime":1634500382817,"results":"32","hashOfConfig":"20"},{"size":7807,"mtime":1634500382817,"results":"33","hashOfConfig":"20"},{"size":4869,"mtime":1634500382817,"results":"34","hashOfConfig":"20"},{"size":3861,"mtime":1634500382809,"results":"35","hashOfConfig":"20"},{"size":2092,"mtime":1634500382817,"results":"36","hashOfConfig":"20"},{"size":1030,"mtime":1634500382809,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kb208x",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ilya/12/print/client/src/index.js",[],"/home/ilya/12/print/client/src/App.js",[],"/home/ilya/12/print/client/src/store/index.js",[],"/home/ilya/12/print/client/src/routes.js",[],"/home/ilya/12/print/client/src/components/Navbar.js",[],"/home/ilya/12/print/client/src/components/Footer.js",[],"/home/ilya/12/print/client/src/store/cartReducer.js",[],"/home/ilya/12/print/client/src/components/dialog.form.js",["78","79","80","81","82","83"],"import React, { useState, useEffect } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Badge from \"@material-ui/core/Badge\";\nimport ShoppingBasketIcon from \"@mui/icons-material/ShoppingBasket\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addCartAction, openCartAction } from \"../store/cartReducer\";\n\nexport const FormDialog = () => {\n  const [items, setItems] = useState([]);\n  const [update, setUpdate] = useState();\n  const [price, setPrice] = useState(0);\n  const [count, setCount] = useState(0);\n  const { open } = useSelector((state) => state.cart);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    loadCart();\n  }, [open]);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    window.location.href = `/order`;\n  };\n\n  const loadCart = () => {\n    if (localStorage.getItem(\"podarok-print-en\")) {\n      let cartList = [];\n      let stored = JSON.parse(localStorage.getItem(\"podarok-print-en\"));\n      let pr = 0;\n      for (let i = 0; i < stored.cart.cartItems.length; i++) {\n        cartList.push(stored.cart.cartItems[i]);\n      }\n      for (let t = 0; t < cartList.length; t++) {\n        console.log(\n          cartList[t].price,\n          cartList[t].quantity,\n          price,\n          cartList[t]\n        );\n        console.log(cartList);\n        pr += cartList[t].price * cartList[t].quantity;\n      }\n      setCount(cartList.length);\n      setPrice(pr);\n      setItems(cartList);\n    }\n  };\n\n  const handleClose = () => {\n    dispatch(openCartAction());\n  };\n\n  const HandleAddQuantity = (item) => {\n    let stored = JSON.parse(localStorage.getItem(\"podarok-print-en\"));\n    for (let i = 0; i < stored.cart.cartItems.length; i++) {\n      if (stored.cart.cartItems[i]._id === `${item._id}`) {\n        if (stored.cart.cartItems[i].quantity >= 50) {\n          stored.cart.cartItems[i].quantity = 50;\n        } else {\n          stored.cart.cartItems[i].quantity++;\n          setPrice(price + Number(stored.cart.cartItems[i].price));\n        }\n        stored.cart.price = price;\n        localStorage.setItem(\"podarok-print-en\", JSON.stringify(stored));\n      }\n    }\n    loadCart();\n    setUpdate(item.quantity);\n  };\n\n  const HandleRemoveQuantity = (item) => {\n    let stored = JSON.parse(localStorage.getItem(\"podarok-print-en\"));\n    for (let i = 0; i < stored.cart.cartItems.length; i++) {\n      if (stored.cart.cartItems[i]._id === `${item._id}`) {\n        if (stored.cart.cartItems[i].quantity <= 1) {\n          stored.cart.cartItems[i].quantity = 1;\n        } else {\n          stored.cart.cartItems[i].quantity--;\n          setPrice(price - Number(stored.cart.cartItems[i].price));\n        }\n        stored.cart.price = price;\n        localStorage.setItem(\"podarok-print-en\", JSON.stringify(stored));\n      }\n    }\n    loadCart();\n    setUpdate(item.quantity);\n  };\n\n  const HandleRemoveItem = (item) => {\n    let stored = JSON.parse(localStorage.getItem(\"podarok-print-en\"));\n    for (let i = 0; i < stored.cart.cartItems.length; i++) {\n      if (stored.cart.cartItems[i]._id === `${item._id}`) {\n        let t = stored.cart.cartItems[0];\n        stored.cart.cartItems[0] = stored.cart.cartItems[i];\n        stored.cart.cartItems[i] = t;\n        setPrice(\n          price -\n            Number(\n              stored.cart.cartItems[0].quantity * stored.cart.cartItems[0].price\n            )\n        );\n        stored.cart.cartItems.shift();\n        stored.cart.price = price;\n        localStorage.setItem(\"podarok-print-en\", JSON.stringify(stored));\n      }\n    }\n    console.log(stored);\n    loadCart();\n    setUpdate(item.quantity);\n  };\n\n  return (\n    <div>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n        scroll=\"body\"\n        fullWidth={true}\n        maxWidth={\"sm\"}\n      >\n        <DialogTitle id=\"form-dialog-title\">Ваш заказ</DialogTitle>\n        <DialogContent>\n          {items.map((item, i) => (\n            <Grid\n              key={i}\n              item\n              className=\"contentBlock\"\n              style={{ width: \"100%\", backgroundColor: \"white\" }}\n            >\n              <Paper className=\"paper\" style={{ display: \"flex\" }}>\n                <li>\n                  <img\n                    src={\"/imgs/\" + item.picture + \".jpg\"}\n                    alt={item.name + \" picture\"}\n                    className=\"picture\"\n                    style={{ width: \"100px\", height: \"100px\", margin: \"auto\" }}\n                  />\n                </li>\n                <li className=\"productName\" style={{ margin: \"auto\" }}>\n                  {item.name}\n                </li>\n                <li style={{ margin: \"auto\" }}>\n                  <Button\n                    onClick={() => {\n                      HandleRemoveQuantity(item);\n                    }}\n                  >\n                    -\n                  </Button>\n                  {item.quantity}\n                  <Button\n                    onClick={() => {\n                      HandleAddQuantity(item);\n                    }}\n                  >\n                    +\n                  </Button>\n                </li>\n                <li className=\"productPrice\" style={{ margin: \"auto\" }}>\n                  {\"₴\" + item.price * item.quantity}\n                </li>\n                <li style={{ margin: \"auto\" }}>\n                  <Button\n                    onClick={() => {\n                      HandleRemoveItem(item);\n                    }}\n                  >\n                    X\n                  </Button>\n                </li>\n              </Paper>\n            </Grid>\n          ))}\n          <Typography style={{ float: \"right\" }}>\n            <b>Сумма {price} грн.</b>\n          </Typography>\n        </DialogContent>\n        <Button\n          onClick={handleSubmit}\n          variant=\"contained\"\n          style={{\n            width: \"100%\",\n            backgroundColor: \"green\",\n            margin: \"10px 0 0\",\n          }}\n          color=\"primary\"\n        >\n          Оформить\n        </Button>\n      </Dialog>\n    </div>\n  );\n};\n","/home/ilya/12/print/client/src/pages/main.js",[],"/home/ilya/12/print/client/src/pages/productList.js",["84"],"import React, { useState, useEffect } from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { Button, ButtonGroup, Container, TextField } from '@material-ui/core';\nimport api from '../api'\n\nlet rows = [\n]\nconst columns = [\n    { field: 'type', headerName: 'type', width: 150 },\n    { field: 'name', headerName: 'name', width: 150 },\n    { field: 'picture', headerName: 'picture', width: 150 },\n    { field: 'price', headerName: 'price', width: 150 },\n];\n\nexport function ProductList(props) {\n    const [selection, setSelection] = useState([]);\n    const [products, setProducts] = useState([0]);\n    const [edit, setEdit] = useState([]);\n\n    const changeProduct = async () => {\n        await api.getProductById(selection).then(prod => {\n            setEdit(prod.data);\n        })\n\n    }\n    // TODO: update products\n    const EditProduct = async () => {\n        await api.updateProductById(edit._id, edit);\n        load();\n    }\n\n    const handleInputChange = async (event) => {\n        const { name, value } = event.target;\n        setEdit({\n            ...edit,\n            [name]: value,\n        })\n    };\n\n    const DeleteProduct = async () => {\n        if (window.confirm(`Do you want to delete the product ${selection} permanently`)) {\n            await api.deleteProductById(selection);\n            load();\n        }\n    }\n\n    const AddProduct = () => {\n        window.location.href = `/product/new`;\n    }\n\n    async function load() {\n        rows = [];\n        await api.getAllProducts().then(products => {\n            products.data.map(product => (rows.push({ id: product._id, type: product.type, name: product.name, picture: product.picture, price: product.price })));\n            setProducts(products.data);\n        });\n    }\n\n    useEffect(() => {\n        async function load() {\n            rows = [];\n            await api.getAllProducts().then(products => {\n                products.data.map(product => (rows.push({ id: product._id, type: product.type, name: product.name, picture: product.picture, price: product.price })));\n                setProducts(products.data);\n            });\n        }\n        load();\n    }, []);\n    return (\n        <div style={{ height: 700, width: '100%', display: 'flex', backgroundColor: 'white' }}>\n            <DataGrid id={rows._id} rows={rows} columns={columns} pageSize={10} checkboxSelection\n                onSelectionModelChange={(newSelection) => {\n                    setSelection(newSelection.selectionModel);\n                }} selectionModel={selection} />\n            <div style={{ width: '30%' }}>\n                <ButtonGroup>\n                    <Button variant=\"contained\" color=\"primary\" onClick={changeProduct}>Edit Data</Button>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={DeleteProduct}>Delete Data</Button>\n                    <Button variant=\"contained\" color=\"primary\" onClick={AddProduct}>Add Data</Button>\n                </ButtonGroup>\n                <Container style={{ width: '200px' }}>\n                    <form onSubmit={EditProduct} method=\"PUT\">\n                        <TextField onChange={handleInputChange} label=\"_id\" type=\"text\" name=\"_id\" id=\"_id\" value={edit._id || ''} disabled={true} />\n                        <TextField onChange={handleInputChange} label=\"type\" type=\"text\" name=\"type\" id=\"type\" value={edit.type || ''} />\n                        <TextField onChange={handleInputChange} label=\"name\" type=\"text\" name=\"name\" id=\"name\" value={edit.name || ''} />\n                        <TextField onChange={handleInputChange} label=\"picture\" type=\"text\" name=\"picture\" id=\"picture\" value={edit.picture || ''} />\n                        <TextField onChange={handleInputChange} label=\"price\" type=\"text\" name=\"price\" id=\"price\" value={edit.price || 0} />\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\n                    </form>\n                </Container>\n            </div>\n        </div >\n    );\n}","/home/ilya/12/print/client/src/pages/productAdd.js",[],"/home/ilya/12/print/client/src/pages/cups.js",[],"/home/ilya/12/print/client/src/pages/t-shirts.js",[],"/home/ilya/12/print/client/src/pages/order.js",["85","86","87","88","89"],"import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport api from \"../api\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  Typography,\n} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport $ from \"jquery\";\n\nconst defaultValues = {\n  name: \"\",\n  surname: \"\",\n  email: \"\",\n  city: \"\",\n  shipping: \"\",\n  socType: \"\",\n  socValue: \"\",\n  paid: false,\n  sent: false,\n  products: \"\",\n  price: \"\",\n};\n\nexport function Order() {\n  const [formValues, setFormValues] = useState(defaultValues);\n  const [items, setItems] = useState([]);\n  const [price, setPrice] = useState(0);\n  const [shippingAddress, setShippingAddress] = useState();\n  const [update, setUpdate] = useState();\n  const [complete, setComplete] = useState(false);\n\n  let addresses = [\"1\", 2];\n\n  async function loadMap() {\n    $(function () {\n      var settings = {\n        async: true,\n        crossDomain: true,\n        url: \"https://api.novaposhta.ua/v2.0/json/\",\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\",\n        },\n        processData: false,\n        data: '{\\r\\n\"257efb66873e2c130a5ae6af8bce89a6\": \"\",\\r\\n \"modelName\": \"AddressGeneral\",\\r\\n \"calledMethod\": \"getWarehouses\",\\r\\n \"methodProperties\": {\\r\\n \"Language\": \"ru\",\\r\\n \"Limit\": 5\\r\\n}\\r\\n}',\n        // \"data\": \"{\\r\\n\\\"257efb66873e2c130a5ae6af8bce89a6\\\": \\\"\\\",\\r\\n \\\"modelName\\\": \\\"AddressGeneral\\\",\\r\\n \\\"calledMethod\\\": \\\"getWarehouses\\\",\\r\\n \\\"methodProperties\\\": {\\r\\n \\\"CityName\\\": \\\"васильевка\\\",\\r\\n \\\"Limit\\\": 5\\r\\n }\\r\\n}\"\n      };\n\n      $.ajax(settings).done(function (response) {\n        console.log(response.data);\n        setUpdate(Math.random());\n      });\n    });\n  }\n\n  async function loadCart() {\n    if (localStorage.getItem(\"podarok-print-en\")) {\n      let cartList = [];\n      let stored = JSON.parse(localStorage.getItem(\"podarok-print-en\"));\n      let pr = 0;\n      for (let i = 0; i < stored.cart.cartItems.length; i++) {\n        cartList.push(stored.cart.cartItems[i]);\n      }\n      for (let t = 0; t < cartList.length; t++) {\n        pr += cartList[t].price * cartList[t].quantity;\n      }\n      setPrice(pr);\n      setItems(cartList);\n      console.log(items);\n      for (let j = 0; j < items.length; j++) {\n        setFormValues({ ...formValues, products: items[j]._id });\n      }\n    }\n    console.log(formValues);\n    await loadMap();\n  }\n\n  const handleClose = () => {\n    setComplete(false);\n    window.location.href = \"/\";\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormValues({\n      ...formValues,\n      [name]: value,\n      price: price,\n      products: items,\n    });\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formValues);\n    await api\n      .insertOrder(formValues)\n      .then(localStorage.removeItem(\"podarok-print-en\"))\n      .then(setComplete(true));\n  };\n\n  useEffect(() => {\n    loadCart();\n  }, []);\n\n  return (\n    <div style={{ backgroundColor: \"whitesmoke\" }}>\n      <form\n        onSubmit={handleSubmit}\n        method=\"POST\"\n        style={{ width: \"500px\", margin: \"auto\" }}\n      >\n        {items.map((item, i) => (\n          <Grid\n            key={i}\n            item\n            className=\"contentBlock\"\n            style={{\n              margin: \"auto\",\n              width: \"500px\",\n              backgroundColor: \"whitesmoke\",\n            }}\n          >\n            <Paper\n              className=\"paper\"\n              style={{ display: \"flex\", backgroundColor: \"whitesmoke\" }}\n            >\n              <li>\n                <img\n                  src={\"/imgs/\" + item.picture + \".jpg\"}\n                  alt={item.name + \" picture\"}\n                  className=\"picture\"\n                  style={{ width: \"100px\", height: \"100px\", margin: \"auto\" }}\n                />\n              </li>\n              <li className=\"productName\" style={{ margin: \"auto\" }}>\n                {item.name}\n              </li>\n              <li style={{ margin: \"auto\" }}>{item.quantity}</li>\n              <li className=\"productPrice\" style={{ margin: \"auto\" }}>\n                {\"₴\" + item.price * item.quantity}\n              </li>\n            </Paper>\n          </Grid>\n        ))}\n        <h3 style={{ float: \"right\" }}>Сумма: {price} грн</h3>\n        <Grid\n          container\n          alignItems=\"center\"\n          justify=\"center\"\n          direction=\"column\"\n          style={{ backgroundColor: \"whitesmoke\" }}\n        >\n          <Grid item>\n            <TextField\n              id=\"name-input\"\n              name=\"name\"\n              label=\"Имя\"\n              type=\"text\"\n              value={formValues.name}\n              onChange={handleInputChange}\n              required={true}\n              fullWidth={true}\n              style={{ width: \"300px\" }}\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n              id=\"surname-input\"\n              name=\"surname\"\n              label=\"Фамилия\"\n              type=\"text\"\n              value={formValues.surname}\n              onChange={handleInputChange}\n              required={true}\n              style={{ width: \"300px\" }}\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n              id=\"city-input\"\n              name=\"city\"\n              label=\"Город\"\n              type=\"text\"\n              value={formValues.city}\n              onChange={handleInputChange}\n              required={true}\n              style={{ width: \"300px\" }}\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n              id=\"email-input\"\n              name=\"email\"\n              label=\"Email\"\n              type=\"email\"\n              value={formValues.email}\n              onChange={handleInputChange}\n              required={true}\n              style={{ width: \"300px\" }}\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n              id=\"price-input\"\n              name=\"price\"\n              type=\"number\"\n              hidden={true}\n              value={formValues.price}\n              required={true}\n              disabled={true}\n              style={{ width: \"300px\" }}\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n              id=\"products-input\"\n              name=\"products\"\n              type=\"text\"\n              hidden={true}\n              value={formValues.products}\n              required={true}\n              disabled={true}\n              style={{ width: \"300px\" }}\n            />\n          </Grid>\n          <Grid item>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              style={{\n                width: \"300px\",\n                backgroundColor: \"green\",\n                margin: \"10px 0\",\n              }}\n              color=\"primary\"\n            >\n              Оформить\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n      <Dialog\n        open={complete}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n        scroll=\"body\"\n        fullWidth={true}\n        maxWidth={\"sm\"}\n      >\n        <DialogTitle id=\"form-dialog-title\">Спасибо</DialogTitle>\n        <DialogContent>\n          <Typography>Мы получили ваш заказ</Typography>\n        </DialogContent>\n        <Button\n          onClick={handleClose}\n          variant=\"contained\"\n          style={{\n            width: \"100%\",\n            backgroundColor: \"green\",\n            margin: \"10px 0 0\",\n          }}\n          color=\"primary\"\n        >\n          Закрыть\n        </Button>\n      </Dialog>\n    </div>\n  );\n}\n","/home/ilya/12/print/client/src/pages/orderList.js",["90"],"import React, { useState, useEffect } from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { Button, ButtonGroup, Container, TextField } from '@material-ui/core';\nimport api from '../api'\n\nlet rows = [\n]\nconst columns = [\n    { field: 'date', headerName: 'date', width: 150 },\n    { field: 'address', headerName: 'address', width: 150 },\n    { field: 'price', headerName: 'price', width: 150 },\n    { field: 'products', headerName: 'products', width: 150 },\n    { field: 'clientName', headerName: 'clientName', width: 150 },\n    { field: 'clientSurname', headerName: 'clientSurname', width: 150 },\n    { field: 'paid', headerName: 'paid', width: 150 },\n    { field: 'sent', headerName: 'sent', width: 150 },\n    { field: 'email', headerName: 'email', width: 150 },\n    { field: 'city', headerName: 'city', width: 150 },\n];\n\nexport function OrderList(props) {\n    const [selection, setSelection] = useState([]);\n    const [products, setProducts] = useState([0]);\n    const [edit, setEdit] = useState([]);\n\n    const changeProduct = async () => {\n        await api.getOrderById(selection).then(prod => {\n            setEdit(prod.data);\n        })\n\n    }\n    // TODO: update orders\n    const EditProduct = async () => {\n        await api.updateOrderById(edit._id, edit);\n        load();\n    }\n\n    const handleInputChange = async (event) => {\n        const { name, value } = event.target;\n        setEdit({\n            ...edit,\n            [name]: value,\n        })\n    };\n\n    const DeleteProduct = async () => {\n        if (window.confirm(`Do you want to delete the product ${selection} permanently`)) {\n            await api.deleteOrderById(selection);\n            load();\n        }\n    }\n\n    async function load() {\n        rows = [];\n        await api.getAllOrders().then(products => {\n            products.data.map(product => (rows.push({\n                id: product._id,\n                date: product.date,\n                address: product.address,\n                price: product.price,\n                products: product.products,\n                clientName: product.name,\n                clientSurname: product.surname,\n                paid: product.paid,\n                sent: product.sent,\n                email: product.email,\n                city: product.city,\n            })));\n            setProducts(products.data);\n        });\n    }\n\n    useEffect(() => {\n        async function load() {\n            rows = [];\n            await api.getAllOrders().then(products => {\n                products.data.map(product => (rows.push({\n                    id: product._id,\n                    date: product.date,\n                    address: product.address,\n                    price: product.price,\n                    products: product.products,\n                    clientName: product.name,\n                    clientSurname: product.surname,\n                    paid: product.paid,\n                    sent: product.sent,\n                    email: product.email,\n                    city: product.city,\n                })));\n                setProducts(products.data);\n            });\n        }\n        load();\n    }, []);\n    return (\n        <div style={{ height: 700, width: '100%', display: 'flex', backgroundColor: 'white' }}>\n            <DataGrid id={rows._id} rows={rows} columns={columns} pageSize={10} checkboxSelection\n                onSelectionModelChange={(newSelection) => {\n                    setSelection(newSelection.selectionModel);\n                }} selectionModel={selection} />\n            <div style={{ width: '30%' }}>\n                <ButtonGroup>\n                    <Button variant=\"contained\" color=\"primary\" onClick={changeProduct}>Edit Data</Button>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={DeleteProduct}>Delete Data</Button>\n                </ButtonGroup>\n                <Container style={{ width: '200px' }}>\n                    <form onSubmit={EditProduct} method=\"PUT\">\n                        <TextField onChange={handleInputChange} label=\"_id\" type=\"text\" name=\"_id\" id=\"_id\" value={edit._id || ''} disabled={true} />\n                        <TextField onChange={handleInputChange} label=\"type\" type=\"text\" name=\"type\" id=\"type\" value={edit.type || ''} />\n                        <TextField onChange={handleInputChange} label=\"name\" type=\"text\" name=\"name\" id=\"name\" value={edit.name || ''} />\n                        <TextField onChange={handleInputChange} label=\"picture\" type=\"text\" name=\"picture\" id=\"picture\" value={edit.picture || ''} />\n                        <TextField onChange={handleInputChange} label=\"price\" type=\"text\" name=\"price\" id=\"price\" value={edit.price || 0} />\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\n                    </form>\n                </Container>\n            </div>\n        </div >\n    );\n}","/home/ilya/12/print/client/src/pages/About.jsx",[],"/home/ilya/12/print/client/src/pages/PaymentAndDeliver.jsx",[],"/home/ilya/12/print/client/src/api.js",[],{"ruleId":"91","severity":1,"message":"92","line":9,"column":8,"nodeType":"93","messageId":"94","endLine":9,"endColumn":13},{"ruleId":"91","severity":1,"message":"95","line":10,"column":8,"nodeType":"93","messageId":"94","endLine":10,"endColumn":26},{"ruleId":"91","severity":1,"message":"96","line":12,"column":10,"nodeType":"93","messageId":"94","endLine":12,"endColumn":23},{"ruleId":"91","severity":1,"message":"97","line":16,"column":10,"nodeType":"93","messageId":"94","endLine":16,"endColumn":16},{"ruleId":"91","severity":1,"message":"98","line":18,"column":10,"nodeType":"93","messageId":"94","endLine":18,"endColumn":15},{"ruleId":"99","severity":1,"message":"100","line":24,"column":6,"nodeType":"101","endLine":24,"endColumn":12,"suggestions":"102"},{"ruleId":"91","severity":1,"message":"103","line":17,"column":12,"nodeType":"93","messageId":"94","endLine":17,"endColumn":20},{"ruleId":"91","severity":1,"message":"104","line":34,"column":10,"nodeType":"93","messageId":"94","endLine":34,"endColumn":25},{"ruleId":"91","severity":1,"message":"105","line":34,"column":27,"nodeType":"93","messageId":"94","endLine":34,"endColumn":45},{"ruleId":"91","severity":1,"message":"97","line":35,"column":10,"nodeType":"93","messageId":"94","endLine":35,"endColumn":16},{"ruleId":"91","severity":1,"message":"106","line":38,"column":7,"nodeType":"93","messageId":"94","endLine":38,"endColumn":16},{"ruleId":"99","severity":1,"message":"100","line":110,"column":6,"nodeType":"101","endLine":110,"endColumn":8,"suggestions":"107"},{"ruleId":"91","severity":1,"message":"103","line":23,"column":12,"nodeType":"93","messageId":"94","endLine":23,"endColumn":20},"no-unused-vars","'Badge' is defined but never used.","Identifier","unusedVar","'ShoppingBasketIcon' is defined but never used.","'addCartAction' is defined but never used.","'update' is assigned a value but never used.","'count' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadCart'. Either include it or remove the dependency array.","ArrayExpression",["108"],"'products' is assigned a value but never used.","'shippingAddress' is assigned a value but never used.","'setShippingAddress' is assigned a value but never used.","'addresses' is assigned a value but never used.",["109"],{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},"Update the dependencies array to be: [loadCart, open]",{"range":"114","text":"115"},"Update the dependencies array to be: [loadCart]",{"range":"116","text":"117"},[979,985],"[loadCart, open]",[3062,3064],"[loadCart]"]