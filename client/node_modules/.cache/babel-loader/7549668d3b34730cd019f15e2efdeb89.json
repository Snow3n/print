{"ast":null,"code":"var _jsxFileName = \"E:\\\\proj\\\\Landing_sis\\\\src\\\\front\\\\client\\\\src\\\\pages\\\\productList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { Button, ButtonGroup } from '@material-ui/core'; // import { Link } from 'react-router-dom';\n// import ReactTable from 'react-table'\n// import { Button, ButtonGroup, Container, Table } from 'reactstrap'\n\nimport api from '../api'; // import styled from 'styled-components'\n// const Update = styled.div`\n//     color: #ef9b0f;\n//     cursor: pointer;\n// `\n// const Delete = styled.div`\n//     color: #ff0000;\n//     cursor: pointer;\n// `\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet rows = [];\nconst columns = [{\n  field: 'type',\n  headerName: 'type',\n  width: 150\n}, {\n  field: 'name',\n  headerName: 'name',\n  width: 150\n}, {\n  field: 'picture',\n  headerName: 'picture',\n  width: 150\n}, {\n  field: 'price',\n  headerName: 'price',\n  width: 150\n}]; // const LoadProduct = () => {\n//     const [products, setProducts] = useState([]);\n//     const load = async (event) => {\n//         event.preventDefault();\n//         rows = [];\n//         await api.getAllProducts().then(products => {\n//             setProducts(products.data);\n//         });\n//         products.map(product => (rows.push({ id: product._id, type: product.type, name: product.name, picture: product.picture, price: product.price })))\n//         console.log(products);\n//         console.log(rows);\n//         // setProducts(products);\n//         // return val;\n//     }\n//     return <Button variant=\"contained\" onClick={load}>Load</Button>;\n// }\n// const UpdateProduct = () => {\n//     const updateUser = event => {\n//         event.preventDefault()\n//         // window.location.href = `/products/update/${this.props.id}`\n//     }\n//     return <Update onClick={updateUser}>Update</Update>\n// }\n// const DeleteProduct = () => {\n//     const deleteUser = event => {\n//         event.preventDefault();\n//         // console.log(this.props.selection.selectionModel);\n//         // if (window.confirm(`Do you want to delete the product ${this.props.id} permanently`)) {\n//         // this.props.selection.selectionModel.map(element => (api.deleteProductById(element)));\n//         // window.location.reload();\n//         // }\n//     }\n//     return <Delete onClick={deleteUser}>Delete</Delete>\n// }\n// const [select, setSelection] = useState([]);\n// const [products, setProducts] = useState([]);\n// let load = async (setProducts) => {\n// let load = async () => {\n//     await api.getAllProducts().then(products => {\n//         // setProducts(product.data)\n//         // console.log(products);\n//         this.setState({ products: products.data })\n//     })\n//     // const { products } = this.state;\n//     try {\n//         console.log('TCL: ProductList -> render -> products', products);\n//         for (let i = 0; i < products.length; i++) {\n//             rows.push({ id: products[i]._id, type: products[i].type, name: products[i].name, picture: products[i].picture, price: products[i].price });\n//         }\n//     }\n//     catch (error) {\n//         console.log(error);\n//     }\n// }\n// load();\n// this.columns = columns;\n// this.rows = rows;\n// }\n// const loaded = async () => {\n//     let val;\n//     await api.getAllProducts().then(products => {\n//         val = products;\n//     });\n//     console.log(val);\n//     return val;\n// }\n\nexport function ProductList(props) {\n  _s();\n\n  const [selection, setSelection] = useState([]);\n  const [products, setProducts] = useState([0]); // setProducts(()=>rows);\n  // const loaded = async () => {\n  // await api.getAllProducts().then(products => {\n  // loaded();\n  // setProducts(loaded().data);\n  // async function t() {\n  //     await api.getAllProducts().then(products => {\n  //         console.log(products.data);\n  //         products.data.map((product) => (\n  //             console.log(product),\n  //             setProducts((prev) => [product, ...prev])\n  //         ))\n  //     })\n  // }\n  // t();\n  // setProducts(props.data);\n  // setTimeout(() => {\n  // setProducts(loaded().data)\n  // console.log(products);\n  // this.setState({ products: products.data })\n  // })\n  // try {\n  // console.log('TCL: ProductList -> render -> products', products);\n  // for (let i = 0; i < products.length; i++) {\n  // products.map(product => (rows.push({ id: product._id, type: product.type, name: product.name, picture: product.picture, price: product.price })))\n  // console.log(rows);\n  // }, 2000)\n  // rows.push({ id: products[i]._id, type: products[i].type, name: products[i].name, picture: products[i].picture, price: products[i].price });\n  // }\n  // }\n  // catch (error) {\n  // console.log(error);\n  // }\n  // }\n  // loaded();\n  // const { products } = this.state;\n  // try {\n  //     console.log('TCL: ProductList -> render -> products', products);\n  //     for (let i = 0; i < products.length; i++) {\n  //         rows.push({ id: products[i]._id, type: products[i].type, name: products[i].name, picture: products[i].picture, price: products[i].price });\n  //     }\n  // }\n  // catch (error) {\n  //     console.log(error);\n  // }\n  // load(setProducts);\n  // constructor(props) {\n  // super(props);\n  // this.state = { products: [], selection: [] };\n  // this.load = this.load.bind(this);\n  // this.columns = [];\n  // this.rows = [];\n  // this.selection = [];\n  // this.returnSelection = this.returnSelection.bind(this);\n  // }\n  // componentDidMount = async () => {\n  //     await api.getAllProducts().then(products => {\n  //         this.setState({\n  //             products: products.data,\n  //         })\n  //         this.load();\n  //     })\n  // }\n  // componentDidUpdate = async (prevProps, prevState) => {\n  //     // await api.getAllProducts().then(products => {\n  //     //     this.setState({\n  //     //         products: products.data,\n  //     //     })\n  //     //     // this.load();\n  //     // })\n  //     console.log(prevState);\n  //     if (this.state.products !== prevState.products) {\n  //         // this.load();\n  //         await api.getAllProducts().then(products => {\n  //             this.setState({\n  //                 products: products.data,\n  //             })\n  //             this.load();\n  //         })\n  //     }\n  // }\n  // let load = async () => {\n  //     await api.getAllProducts().then(product => {\n  //         setProducts(product.data)\n  //     })\n  //     const { products } = this.state;\n  //     try {\n  //         console.log('TCL: ProductList -> render -> products', products);\n  //         for (let i = 0; i < products.length; i++) {\n  //             this.rows.push({ id: products[i]._id, type: products[i].type, name: products[i].name, picture: products[i].picture, price: products[i].price });\n  //         }\n  //     }\n  //     catch (error) {\n  //         console.log(error);\n  //     }\n  //     let rows = [\n  //     ]\n  //     const columns = [\n  //         { field: 'type', headerName: 'type', width: 150 },\n  //         { field: 'name', headerName: 'name', width: 150 },\n  //         { field: 'picture', headerName: 'picture', width: 150 },\n  //         { field: 'price', headerName: 'price', width: 150 },\n  //     ];\n  //     this.columns = columns;\n  //     this.rows = rows;\n  // }\n  // async returnSelection(newSelection) {\n  //     this.setState({ selection: newSelection });\n  // }\n  // loaded();\n\n  const EditProduct = () => {};\n\n  const DeleteProduct = () => {};\n\n  const AddProduct = () => {\n    window.location.href = `/product/new`;\n  };\n\n  const load = async event => {\n    // event.preventDefault();\n    rows = [];\n    await api.getAllProducts().then(products => {\n      products.data.map(product => rows.push({\n        id: product._id,\n        type: product.type,\n        name: product.name,\n        picture: product.picture,\n        price: product.price\n      }));\n      setProducts(products.data);\n    }); // const load = () => {\n    // products.map(product => (rows.push({ id: product._id, type: product.type, name: product.name, picture: product.picture, price: product.price })))\n    // console.log(products);\n    // console.log(rows);\n  }; // setProducts(products);\n  // return val;\n  // }\n\n\n  console.log(selection);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 700,\n      width: '100%',\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(DataGrid, {\n      id: rows._id,\n      rows: rows,\n      columns: columns,\n      pageSize: 10,\n      checkboxSelection: true,\n      onSelectionModelChange: newSelection => {\n        setSelection(newSelection.selectionModel);\n      },\n      selectionModel: selection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: load,\n        children: \"Load Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: EditProduct,\n        children: \"Edit Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: DeleteProduct,\n        children: \"Delete Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: AddProduct,\n        children: \"Add Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 9\n  }, this);\n} // export default withRouter(ProductList);\n\n_s(ProductList, \"fjothzyfioalgmHh7y/QDncNkP0=\");\n\n_c = ProductList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductList\");","map":{"version":3,"sources":["E:/proj/Landing_sis/src/front/client/src/pages/productList.js"],"names":["React","useState","DataGrid","Button","ButtonGroup","api","rows","columns","field","headerName","width","ProductList","props","selection","setSelection","products","setProducts","EditProduct","DeleteProduct","AddProduct","window","location","href","load","event","getAllProducts","then","data","map","product","push","id","_id","type","name","picture","price","console","log","height","display","newSelection","selectionModel"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,mBAApC,C,CACA;AACA;AACA;;AACA,OAAOC,GAAP,MAAgB,QAAhB,C,CAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,IAAIC,IAAI,GAAG,EAAX;AAEA,MAAMC,OAAO,GAAG,CACZ;AAAEC,EAAAA,KAAK,EAAE,MAAT;AAAiBC,EAAAA,UAAU,EAAE,MAA7B;AAAqCC,EAAAA,KAAK,EAAE;AAA5C,CADY,EAEZ;AAAEF,EAAAA,KAAK,EAAE,MAAT;AAAiBC,EAAAA,UAAU,EAAE,MAA7B;AAAqCC,EAAAA,KAAK,EAAE;AAA5C,CAFY,EAGZ;AAAEF,EAAAA,KAAK,EAAE,SAAT;AAAoBC,EAAAA,UAAU,EAAE,SAAhC;AAA2CC,EAAAA,KAAK,EAAE;AAAlD,CAHY,EAIZ;AAAEF,EAAAA,KAAK,EAAE,OAAT;AAAkBC,EAAAA,UAAU,EAAE,OAA9B;AAAuCC,EAAAA,KAAK,EAAE;AAA9C,CAJY,CAAhB,C,CAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AAC/B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,CAAC,CAAD,CAAD,CAAxgB,WAAW,GAAG,MAAM,CAEzB,CAFD;;AAIA,QAAMC,aAAa,GAAG,MAAM,CAE3B,CAFD;;AAIA,QAAMC,UAAU,GAAG,MAAM;AACrBC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAwB,cAAxB;AACH,GAFD;;AAIA,QAAMC,IAAI,GAAG,MAAOC,KAAP,IAAiB;AAC1B;AACAlB,IAAAA,IAAI,GAAG,EAAP;AACA,UAAMD,GAAG,CAACoB,cAAJ,GAAqBC,IAArB,CAA0BX,QAAQ,IAAI;AACxCA,MAAAA,QAAQ,CAACY,IAAT,CAAcC,GAAd,CAAkBC,OAAO,IAAKvB,IAAI,CAACwB,IAAL,CAAU;AAAEC,QAAAA,EAAE,EAAEF,OAAO,CAACG,GAAd;AAAmBC,QAAAA,IAAI,EAAEJ,OAAO,CAACI,IAAjC;AAAuCC,QAAAA,IAAI,EAAEL,OAAO,CAACK,IAArD;AAA2DC,QAAAA,OAAO,EAAEN,OAAO,CAACM,OAA5E;AAAqFC,QAAAA,KAAK,EAAEP,OAAO,CAACO;AAApG,OAAV,CAA9B;AACApB,MAAAA,WAAW,CAACD,QAAQ,CAACY,IAAV,CAAX;AACH,KAHK,CAAN,CAH0B,CAO1B;AACA;AACA;AACA;AACH,GAXD,CAvI+B,CAmJ/B;AACA;AACA;;;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYzB,SAAZ;AACA,sBACI;AAAK,IAAA,KAAK,EAAE;AAAE0B,MAAAA,MAAM,EAAE,GAAV;AAAe7B,MAAAA,KAAK,EAAE,MAAtB;AAA8B8B,MAAAA,OAAO,EAAE;AAAvC,KAAZ;AAAA,4BACI,QAAC,QAAD;AAAU,MAAA,EAAE,EAAElC,IAAI,CAAC0B,GAAnB;AAAwB,MAAA,IAAI,EAAE1B,IAA9B;AAAoC,MAAA,OAAO,EAAEC,OAA7C;AAAsD,MAAA,QAAQ,EAAE,EAAhE;AAAoE,MAAA,iBAAiB,MAArF;AACI,MAAA,sBAAsB,EAAGkC,YAAD,IAAkB;AACtC3B,QAAAA,YAAY,CAAC2B,YAAY,CAACC,cAAd,CAAZ;AACH,OAHL;AAGO,MAAA,cAAc,EAAE7B;AAHvB;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI,QAAC,WAAD;AAAA,8BACI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,OAAO,EAAEU,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,KAAK,EAAC,SAAlC;AAA4C,QAAA,OAAO,EAAEN,WAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,KAAK,EAAC,WAAlC;AAA8C,QAAA,OAAO,EAAEC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,KAAK,EAAC,SAAlC;AAA4C,QAAA,OAAO,EAAEC,UAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,C,CAED;;GAvKgBR,W;;KAAAA,W","sourcesContent":["import React, { useState } from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport { Button, ButtonGroup } from '@material-ui/core';\r\n// import { Link } from 'react-router-dom';\r\n// import ReactTable from 'react-table'\r\n// import { Button, ButtonGroup, Container, Table } from 'reactstrap'\r\nimport api from '../api'\r\n\r\n// import styled from 'styled-components'\r\n\r\n// const Update = styled.div`\r\n//     color: #ef9b0f;\r\n//     cursor: pointer;\r\n// `\r\n\r\n// const Delete = styled.div`\r\n//     color: #ff0000;\r\n//     cursor: pointer;\r\n// `\r\n\r\nlet rows = [\r\n]\r\nconst columns = [\r\n    { field: 'type', headerName: 'type', width: 150 },\r\n    { field: 'name', headerName: 'name', width: 150 },\r\n    { field: 'picture', headerName: 'picture', width: 150 },\r\n    { field: 'price', headerName: 'price', width: 150 },\r\n];\r\n\r\n// const LoadProduct = () => {\r\n//     const [products, setProducts] = useState([]);\r\n//     const load = async (event) => {\r\n//         event.preventDefault();\r\n//         rows = [];\r\n\r\n//         await api.getAllProducts().then(products => {\r\n//             setProducts(products.data);\r\n//         });\r\n//         products.map(product => (rows.push({ id: product._id, type: product.type, name: product.name, picture: product.picture, price: product.price })))\r\n//         console.log(products);\r\n//         console.log(rows);\r\n//         // setProducts(products);\r\n//         // return val;\r\n//     }\r\n//     return <Button variant=\"contained\" onClick={load}>Load</Button>;\r\n// }\r\n\r\n// const UpdateProduct = () => {\r\n//     const updateUser = event => {\r\n//         event.preventDefault()\r\n\r\n//         // window.location.href = `/products/update/${this.props.id}`\r\n//     }\r\n//     return <Update onClick={updateUser}>Update</Update>\r\n// }\r\n\r\n// const DeleteProduct = () => {\r\n//     const deleteUser = event => {\r\n//         event.preventDefault();\r\n//         // console.log(this.props.selection.selectionModel);\r\n//         // if (window.confirm(`Do you want to delete the product ${this.props.id} permanently`)) {\r\n//         // this.props.selection.selectionModel.map(element => (api.deleteProductById(element)));\r\n//         // window.location.reload();\r\n//         // }\r\n//     }\r\n//     return <Delete onClick={deleteUser}>Delete</Delete>\r\n// }\r\n\r\n// const [select, setSelection] = useState([]);\r\n// const [products, setProducts] = useState([]);\r\n\r\n// let load = async (setProducts) => {\r\n\r\n// let load = async () => {\r\n//     await api.getAllProducts().then(products => {\r\n//         // setProducts(product.data)\r\n//         // console.log(products);\r\n//         this.setState({ products: products.data })\r\n//     })\r\n\r\n//     // const { products } = this.state;\r\n//     try {\r\n//         console.log('TCL: ProductList -> render -> products', products);\r\n//         for (let i = 0; i < products.length; i++) {\r\n//             rows.push({ id: products[i]._id, type: products[i].type, name: products[i].name, picture: products[i].picture, price: products[i].price });\r\n//         }\r\n//     }\r\n//     catch (error) {\r\n//         console.log(error);\r\n//     }\r\n// }\r\n// load();\r\n\r\n// this.columns = columns;\r\n// this.rows = rows;\r\n// }\r\n\r\n// const loaded = async () => {\r\n//     let val;\r\n//     await api.getAllProducts().then(products => {\r\n//         val = products;\r\n//     });\r\n//     console.log(val);\r\n//     return val;\r\n// }\r\n\r\nexport function ProductList(props) {\r\n    const [selection, setSelection] = useState([]);\r\n    const [products, setProducts] = useState([0]);\r\n    // setProducts(()=>rows);\r\n    // const loaded = async () => {\r\n    // await api.getAllProducts().then(products => {\r\n    // loaded();\r\n    // setProducts(loaded().data);\r\n    // async function t() {\r\n    //     await api.getAllProducts().then(products => {\r\n    //         console.log(products.data);\r\n    //         products.data.map((product) => (\r\n    //             console.log(product),\r\n    //             setProducts((prev) => [product, ...prev])\r\n    //         ))\r\n    //     })\r\n    // }\r\n    // t();\r\n    // setProducts(props.data);\r\n    // setTimeout(() => {\r\n    // setProducts(loaded().data)\r\n    // console.log(products);\r\n    // this.setState({ products: products.data })\r\n    // })\r\n    // try {\r\n    // console.log('TCL: ProductList -> render -> products', products);\r\n    // for (let i = 0; i < products.length; i++) {\r\n    // products.map(product => (rows.push({ id: product._id, type: product.type, name: product.name, picture: product.picture, price: product.price })))\r\n    // console.log(rows);\r\n    // }, 2000)\r\n    // rows.push({ id: products[i]._id, type: products[i].type, name: products[i].name, picture: products[i].picture, price: products[i].price });\r\n    // }\r\n    // }\r\n    // catch (error) {\r\n    // console.log(error);\r\n    // }\r\n    // }\r\n    // loaded();\r\n    // const { products } = this.state;\r\n    // try {\r\n    //     console.log('TCL: ProductList -> render -> products', products);\r\n    //     for (let i = 0; i < products.length; i++) {\r\n    //         rows.push({ id: products[i]._id, type: products[i].type, name: products[i].name, picture: products[i].picture, price: products[i].price });\r\n    //     }\r\n    // }\r\n    // catch (error) {\r\n    //     console.log(error);\r\n    // }\r\n    // load(setProducts);\r\n    // constructor(props) {\r\n    // super(props);\r\n    // this.state = { products: [], selection: [] };\r\n    // this.load = this.load.bind(this);\r\n    // this.columns = [];\r\n    // this.rows = [];\r\n    // this.selection = [];\r\n    // this.returnSelection = this.returnSelection.bind(this);\r\n\r\n    // }\r\n\r\n    // componentDidMount = async () => {\r\n    //     await api.getAllProducts().then(products => {\r\n    //         this.setState({\r\n    //             products: products.data,\r\n\r\n    //         })\r\n    //         this.load();\r\n    //     })\r\n    // }\r\n\r\n\r\n\r\n    // componentDidUpdate = async (prevProps, prevState) => {\r\n    //     // await api.getAllProducts().then(products => {\r\n    //     //     this.setState({\r\n    //     //         products: products.data,\r\n    //     //     })\r\n    //     //     // this.load();\r\n    //     // })\r\n    //     console.log(prevState);\r\n    //     if (this.state.products !== prevState.products) {\r\n    //         // this.load();\r\n    //         await api.getAllProducts().then(products => {\r\n    //             this.setState({\r\n    //                 products: products.data,\r\n    //             })\r\n    //             this.load();\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    // let load = async () => {\r\n    //     await api.getAllProducts().then(product => {\r\n    //         setProducts(product.data)\r\n    //     })\r\n\r\n    //     const { products } = this.state;\r\n    //     try {\r\n    //         console.log('TCL: ProductList -> render -> products', products);\r\n    //         for (let i = 0; i < products.length; i++) {\r\n    //             this.rows.push({ id: products[i]._id, type: products[i].type, name: products[i].name, picture: products[i].picture, price: products[i].price });\r\n    //         }\r\n    //     }\r\n    //     catch (error) {\r\n    //         console.log(error);\r\n    //     }\r\n    //     let rows = [\r\n    //     ]\r\n    //     const columns = [\r\n    //         { field: 'type', headerName: 'type', width: 150 },\r\n    //         { field: 'name', headerName: 'name', width: 150 },\r\n    //         { field: 'picture', headerName: 'picture', width: 150 },\r\n    //         { field: 'price', headerName: 'price', width: 150 },\r\n    //     ];\r\n    //     this.columns = columns;\r\n    //     this.rows = rows;\r\n    // }\r\n\r\n    // async returnSelection(newSelection) {\r\n    //     this.setState({ selection: newSelection });\r\n    // }\r\n    // loaded();\r\n\r\n    const EditProduct = () => {\r\n\r\n    }\r\n\r\n    const DeleteProduct = () => {\r\n\r\n    }\r\n\r\n    const AddProduct = () => {\r\n        window.location.href = `/product/new`;\r\n    }\r\n\r\n    const load = async (event) => {\r\n        // event.preventDefault();\r\n        rows = [];\r\n        await api.getAllProducts().then(products => {\r\n            products.data.map(product => (rows.push({ id: product._id, type: product.type, name: product.name, picture: product.picture, price: product.price })));\r\n            setProducts(products.data);\r\n        });\r\n        // const load = () => {\r\n        // products.map(product => (rows.push({ id: product._id, type: product.type, name: product.name, picture: product.picture, price: product.price })))\r\n        // console.log(products);\r\n        // console.log(rows);\r\n    }\r\n    // setProducts(products);\r\n    // return val;\r\n    // }\r\n    console.log(selection);\r\n    return (\r\n        <div style={{ height: 700, width: '100%', display: 'flex' }}>\r\n            <DataGrid id={rows._id} rows={rows} columns={columns} pageSize={10} checkboxSelection\r\n                onSelectionModelChange={(newSelection) => {\r\n                    setSelection(newSelection.selectionModel);\r\n                }} selectionModel={selection} />\r\n            <ButtonGroup>\r\n                <Button variant=\"contained\" onClick={load}>Load Data</Button>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={EditProduct}>Edit Data</Button>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={DeleteProduct}>Delete Data</Button>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={AddProduct}>Add Data</Button>\r\n            </ButtonGroup>\r\n        </div >\r\n    );\r\n}\r\n\r\n// export default withRouter(ProductList);"]},"metadata":{},"sourceType":"module"}